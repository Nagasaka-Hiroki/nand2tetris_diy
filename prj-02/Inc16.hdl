// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/Inc16.hdl

/**
 * 16-bit incrementer:
 * out = in + 1 (arithmetic addition)
 */

CHIP Inc16 {
    IN in[16];
    OUT out[16];

    PARTS:
   // Put you code here:

    //実装方針
    /*
    本の内容の通りAdd16を使って簡単に実装する。
    「バスは番号を指定して個別の番号に対して定数入力ができる」これを意識すると書ける。
    細切れにして入力できることを忘れていて迷走した答えを出した。
    念のためその解も末尾にコメントとして記載する。実行結果は同一なのでそっちでもいいが、回路の単純さを考えるとAdd16一つで実装できたほうがいいだろう。
    */
    Add16( a=in, b[0]=true, b[1..15]=false, out=out);

    //以上。


    //以下の回答は、b[0]=true, b[1..15]=false,　という書き方をできることを忘れていた私が迷走して出した回答です。
    //バスを個別に入力できないと思い込み、true == -1ととらえ、 +1 を別の方法で無理やり実装しています。

    //実装方針(別解:バスの使い方がわかってない場合の無理やりのやり方 その１)
    /*
        定数入力true==(1111 1111 1111 1111)をうまく使う。
        trueは全ビットが1で構成される。そのため補数表現では-1になる。
        そのため、+1を実装することは難しいが、-1をすることは簡単である（Add16を使えば）。
        また、補数表現の作り方にも着目する。補数の作り方は以下のとおりである。
        
        xの補数は、xの全ビットを反転する、つまり論理否定演算Notをし、結果に+1をする。
        すなわち、
        -x == !x + 1
        である。
        
        この式から以下のことがわかる。
        !x == -(x+1)　....(※)
        すなわち、xの全ビット反転(論理否定)はx+1の補数を計算することになる。この1つずれる現象が重要だと考える。
        なぜなら、論理否定は相互変換が容易で、!xがわかればxがわかるからである。そのため以下の式を考える。
        !(x+1)
        この式の論理否定を外せば以下の式が導けると思う。
        !(x+1) == -(x+2) == -x -2
        これは求めるべきx+1の論理否定が、-x と　-2がわかれば計算することができることを表している。
        前述の通り -1 を計算することは単純である。同様に　-2は　-1を2回繰り返すことで実現できそうだ。
        課題は-xである。

        しかし、これは(※)を利用すると作ることができる。
        (※)の式中のxを x == y-1 に置き換えると以下の式が導ける。
        !(y-1) == -y
        ゆえにyに-1を作用させて論理否定をすれば、yの補数、-yを計算することができる。
        +1する代わりに -1になっていることが重要。 +1が出る手順だと計算できない。
        
        以上からまとめると、
        !(x+1) == -x -2 == !(x-1) -1 -1

        x+1 == !{!(x-1) -1 -1}
        という式を得る。上記の式は、! -> Not16、 -1 == +(-1) -> Add16とtrueで実行可能である。
        ゆえに、インクリメンタは、Not16とAdd16という素子を使えば実装できそうである。
    */
    /*
    // x->inと実行部分では置き換える。
    // x + (-1) を実行する。
    Add16( a=in, b=true, out=in-1);

    // -x を計算する。
    Not16( in=in-1, out=negative-x);

    // -x -1 -1　を計算する。
    Add16( a=true,      b=true,       out=negative2);
    Add16( a=negative2, b=negative-x, out=inv-incx);

    // 最後に論理否定で全ビットを反転しx+1を得る。
    Not16( in=inv-incx, out=out);
    */
}